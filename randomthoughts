


Todo:
    + Execute a Scenario
    - You've left the parser half-done
        + It doesn't add steps properly
            + Hrm, still not working.
        + It doesn't save a step's table properly
        - makeTable is a no-op
        - Properly handle exceptions by returning an error

    - Add a first text harness for output - scenario_start scenario_done etc
    + Implement the short-circuiting properly
    - Execute Feature (with background, expanded data steps)
    - Write a data harness
    + Integrate the ragel parser
    - Write a command-line tool example
    - Get a code review
    - Document the shit out of it

    - Allow other languages again



-------

OK, so the core of this is...

    Lose the formatter idea, something instead just needs to
    own/instantiate/whatever a T object, then it needs to
    load the features, all that jazz, and pass through the
    t object


    Next up you need a step-matcher object
        - This is actually an interface with a sample implementation





Loading phase:
    Load the feature files, giving back a feature model
    Instatiate a step definition loader and matcher

Running the tests:
    Instatiate a step dispatcher, which requires

    Step dispatcher requires:
        + The feature model
        + A step matcher
        + A step execution environment

        It instantiates a Test Status object

        Then for each feature, scenario, step
            Get the step from the step matcher
            StepExecutor->execute( StepCode, TestStatusObject, StepModel )
            Dispatch the result to the formatter

            Execute the step with the Test Status Object, and Step Execution Environment

