
//line lexer_go.rl:1
package gocumber

  
//line lexer_go.rl:141


  // START: write data noerror;
  
//line ../gocumber/parser.go:12
var _lexer_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 16, 1, 17, 
	1, 18, 1, 19, 1, 20, 1, 21, 
	1, 22, 1, 23, 2, 2, 18, 2, 
	3, 4, 2, 13, 0, 2, 14, 15, 
	2, 17, 0, 2, 17, 1, 2, 17, 
	16, 2, 17, 19, 2, 18, 6, 2, 
	18, 7, 2, 18, 8, 2, 18, 9, 
	2, 18, 10, 2, 18, 16, 2, 20, 
	21, 2, 22, 0, 2, 22, 1, 2, 
	22, 16, 2, 22, 19, 3, 4, 14, 
	15, 3, 5, 14, 15, 3, 11, 14, 
	15, 3, 12, 14, 15, 3, 13, 14, 
	15, 3, 14, 15, 18, 3, 17, 0, 
	11, 3, 17, 14, 15, 4, 2, 14, 
	15, 18, 4, 3, 4, 14, 15, 4, 
	17, 0, 14, 15, 5, 17, 0, 11, 
	14, 15, 
}

var _lexer_key_offsets []int16 = []int16{
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 91, 98, 
	103, 104, 105, 107, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 134, 136, 138, 140, 142, 144, 146, 
	148, 150, 152, 154, 156, 158, 160, 162, 
	164, 166, 183, 184, 185, 186, 187, 188, 
	189, 190, 191, 192, 199, 201, 203, 205, 
	207, 209, 211, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 222, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 251, 253, 
	255, 257, 259, 261, 263, 265, 267, 269, 
	271, 273, 275, 277, 279, 281, 283, 285, 
	287, 289, 291, 293, 295, 297, 299, 301, 
	303, 305, 307, 309, 311, 313, 315, 317, 
	320, 322, 324, 326, 328, 330, 332, 333, 
	334, 335, 336, 337, 338, 339, 340, 341, 
	342, 343, 345, 346, 347, 348, 349, 350, 
	351, 352, 353, 354, 355, 368, 370, 372, 
	374, 376, 378, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 439, 440, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 488, 490, 492, 494, 
	496, 498, 500, 502, 504, 506, 508, 510, 
	512, 514, 516, 518, 520, 522, 524, 526, 
	528, 530, 532, 534, 536, 538, 540, 543, 
	545, 547, 549, 551, 553, 555, 557, 558, 
	562, 568, 571, 573, 579, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 614, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	635, 637, 639, 641, 643, 645, 647, 649, 
	650, 651, 
}

var _lexer_trans_keys []byte = []byte{
	10, 32, 34, 35, 37, 64, 65, 66, 
	69, 70, 71, 83, 84, 87, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 64, 
	65, 66, 69, 70, 71, 83, 84, 87, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 110, 
	100, 10, 13, 10, 13, 97, 99, 107, 
	103, 114, 111, 117, 110, 100, 58, 10, 
	10, 10, 32, 35, 37, 64, 65, 70, 
	71, 83, 84, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 110, 10, 100, 10, 32, 
	34, 35, 37, 64, 65, 66, 69, 70, 
	71, 83, 84, 87, 124, 9, 13, 120, 
	97, 109, 112, 108, 101, 58, 10, 10, 
	10, 32, 35, 70, 124, 9, 13, 10, 
	101, 10, 97, 10, 116, 10, 117, 10, 
	114, 10, 101, 10, 58, 101, 97, 116, 
	117, 114, 101, 58, 10, 10, 10, 32, 
	35, 37, 64, 66, 69, 70, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 97, 10, 
	99, 10, 107, 10, 103, 10, 114, 10, 
	111, 10, 117, 10, 110, 10, 100, 10, 
	58, 10, 120, 10, 97, 10, 109, 10, 
	112, 10, 108, 10, 101, 10, 101, 10, 
	97, 10, 116, 10, 117, 10, 114, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 32, 58, 
	10, 79, 10, 117, 10, 116, 10, 108, 
	10, 105, 10, 110, 105, 118, 101, 110, 
	99, 101, 110, 97, 114, 105, 111, 32, 
	58, 79, 117, 116, 108, 105, 110, 101, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	65, 70, 71, 83, 84, 87, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 110, 10, 100, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 58, 10, 105, 
	10, 118, 10, 101, 10, 110, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 104, 10, 10, 
	10, 32, 35, 37, 64, 65, 66, 70, 
	71, 83, 84, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 110, 10, 100, 10, 97, 
	10, 99, 10, 107, 10, 103, 10, 114, 
	10, 111, 10, 117, 10, 110, 10, 100, 
	10, 58, 10, 101, 10, 97, 10, 116, 
	10, 117, 10, 114, 10, 101, 10, 105, 
	10, 118, 10, 101, 10, 110, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 32, 58, 10, 
	79, 10, 117, 10, 116, 10, 108, 10, 
	105, 10, 110, 10, 104, 104, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	64, 65, 66, 69, 70, 71, 83, 84, 
	87, 124, 9, 13, 10, 101, 10, 97, 
	10, 116, 10, 117, 10, 114, 10, 101, 
	10, 58, 10, 105, 10, 118, 10, 101, 
	10, 110, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 32, 58, 10, 79, 10, 117, 10, 
	116, 10, 108, 10, 105, 10, 110, 10, 
	104, 187, 191, 
}

var _lexer_single_lengths []byte = []byte{
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 5, 3, 
	1, 1, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	11, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 15, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	4, 3, 2, 4, 15, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 
}

var _lexer_range_lengths []byte = []byte{
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 
}

var _lexer_index_offsets []int16 = []int16{
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 111, 118, 
	123, 125, 127, 130, 133, 135, 137, 139, 
	141, 143, 145, 147, 149, 151, 153, 155, 
	157, 170, 173, 176, 179, 182, 185, 188, 
	191, 194, 197, 200, 203, 206, 209, 212, 
	215, 218, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 260, 263, 266, 269, 
	272, 275, 278, 281, 283, 285, 287, 289, 
	291, 293, 295, 297, 299, 310, 313, 316, 
	319, 322, 325, 328, 331, 334, 337, 340, 
	343, 346, 349, 352, 355, 358, 361, 364, 
	367, 370, 373, 376, 379, 382, 385, 388, 
	391, 394, 397, 400, 403, 406, 409, 412, 
	415, 418, 421, 424, 427, 430, 433, 436, 
	440, 443, 446, 449, 452, 455, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 483, 485, 487, 489, 491, 493, 
	495, 497, 499, 501, 503, 516, 519, 522, 
	525, 528, 531, 534, 537, 540, 543, 546, 
	549, 552, 555, 558, 561, 564, 567, 570, 
	573, 576, 579, 582, 585, 588, 591, 594, 
	597, 600, 603, 606, 609, 612, 615, 618, 
	621, 623, 625, 639, 642, 645, 648, 651, 
	654, 657, 660, 663, 666, 669, 672, 675, 
	678, 681, 684, 687, 690, 693, 696, 699, 
	702, 705, 708, 711, 714, 717, 720, 723, 
	726, 729, 732, 735, 738, 741, 744, 747, 
	750, 753, 756, 759, 762, 765, 768, 772, 
	775, 778, 781, 784, 787, 790, 793, 795, 
	799, 805, 809, 812, 818, 835, 838, 841, 
	844, 847, 850, 853, 856, 859, 862, 865, 
	868, 871, 874, 877, 880, 883, 886, 889, 
	893, 896, 899, 902, 905, 908, 911, 914, 
	916, 918, 
}

var _lexer_trans_targs []int16 = []int16{
	2, 2, 3, 13, 15, 29, 32, 36, 
	66, 83, 142, 146, 254, 254, 255, 287, 
	2, 0, 2, 2, 3, 13, 15, 29, 
	32, 36, 66, 83, 142, 146, 254, 254, 
	255, 2, 0, 4, 0, 5, 0, 7, 
	6, 6, 7, 6, 6, 8, 8, 9, 
	8, 8, 8, 8, 9, 8, 8, 8, 
	8, 10, 8, 8, 8, 8, 11, 8, 
	8, 2, 12, 12, 0, 2, 12, 12, 
	0, 2, 14, 13, 2, 0, 16, 0, 
	17, 0, 18, 0, 19, 0, 20, 0, 
	21, 0, 22, 0, 23, 0, 24, 0, 
	25, 0, 26, 0, 27, 0, 28, 0, 
	289, 0, 0, 0, 0, 0, 30, 31, 
	2, 31, 31, 29, 30, 30, 2, 31, 
	29, 31, 0, 33, 0, 34, 0, 2, 
	14, 35, 2, 14, 35, 37, 0, 38, 
	0, 39, 0, 40, 0, 41, 0, 42, 
	0, 43, 0, 44, 0, 45, 0, 46, 
	0, 48, 47, 48, 47, 48, 48, 2, 
	49, 2, 63, 261, 268, 272, 286, 286, 
	48, 47, 48, 50, 47, 48, 51, 47, 
	48, 52, 47, 48, 53, 47, 48, 54, 
	47, 48, 55, 47, 48, 56, 47, 48, 
	57, 47, 48, 58, 47, 48, 59, 47, 
	48, 60, 47, 48, 61, 47, 48, 62, 
	47, 48, 2, 47, 48, 64, 47, 48, 
	65, 47, 2, 2, 3, 13, 15, 29, 
	32, 36, 66, 83, 142, 146, 254, 254, 
	255, 2, 0, 67, 0, 68, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 73, 
	0, 75, 74, 75, 74, 75, 75, 2, 
	76, 2, 75, 74, 75, 77, 74, 75, 
	78, 74, 75, 79, 74, 75, 80, 74, 
	75, 81, 74, 75, 82, 74, 75, 65, 
	74, 84, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 89, 0, 90, 0, 92, 
	91, 92, 91, 92, 92, 2, 93, 2, 
	107, 117, 123, 128, 92, 91, 92, 94, 
	91, 92, 95, 91, 92, 96, 91, 92, 
	97, 91, 92, 98, 91, 92, 99, 91, 
	92, 100, 91, 92, 101, 91, 92, 102, 
	91, 92, 103, 91, 92, 104, 91, 92, 
	105, 91, 92, 106, 91, 92, 2, 91, 
	92, 108, 91, 92, 109, 91, 92, 110, 
	91, 92, 111, 91, 92, 112, 91, 92, 
	113, 91, 92, 114, 91, 92, 115, 91, 
	92, 116, 91, 92, 65, 91, 92, 118, 
	91, 92, 119, 91, 92, 120, 91, 92, 
	121, 91, 92, 122, 91, 92, 116, 91, 
	92, 124, 91, 92, 125, 91, 92, 126, 
	91, 92, 127, 91, 92, 122, 91, 92, 
	129, 91, 92, 130, 91, 92, 131, 91, 
	92, 132, 91, 92, 133, 91, 92, 134, 
	91, 92, 135, 91, 92, 136, 65, 91, 
	92, 137, 91, 92, 138, 91, 92, 139, 
	91, 92, 140, 91, 92, 141, 91, 92, 
	122, 91, 143, 0, 144, 0, 145, 0, 
	34, 0, 147, 0, 148, 0, 149, 0, 
	150, 0, 151, 0, 152, 0, 153, 0, 
	154, 200, 0, 155, 0, 156, 0, 157, 
	0, 158, 0, 159, 0, 160, 0, 161, 
	0, 162, 0, 164, 163, 164, 163, 164, 
	164, 2, 165, 2, 179, 181, 188, 192, 
	199, 199, 164, 163, 164, 166, 163, 164, 
	167, 163, 164, 168, 163, 164, 169, 163, 
	164, 170, 163, 164, 171, 163, 164, 172, 
	163, 164, 173, 163, 164, 174, 163, 164, 
	175, 163, 164, 176, 163, 164, 177, 163, 
	164, 178, 163, 164, 2, 163, 164, 180, 
	163, 164, 65, 163, 164, 182, 163, 164, 
	183, 163, 164, 184, 163, 164, 185, 163, 
	164, 186, 163, 164, 187, 163, 164, 65, 
	163, 164, 189, 163, 164, 190, 163, 164, 
	191, 163, 164, 65, 163, 164, 193, 163, 
	164, 194, 163, 164, 195, 163, 164, 196, 
	163, 164, 197, 163, 164, 198, 163, 164, 
	187, 163, 164, 190, 163, 202, 201, 202, 
	201, 202, 202, 2, 203, 2, 217, 219, 
	229, 235, 239, 253, 253, 202, 201, 202, 
	204, 201, 202, 205, 201, 202, 206, 201, 
	202, 207, 201, 202, 208, 201, 202, 209, 
	201, 202, 210, 201, 202, 211, 201, 202, 
	212, 201, 202, 213, 201, 202, 214, 201, 
	202, 215, 201, 202, 216, 201, 202, 2, 
	201, 202, 218, 201, 202, 65, 201, 202, 
	220, 201, 202, 221, 201, 202, 222, 201, 
	202, 223, 201, 202, 224, 201, 202, 225, 
	201, 202, 226, 201, 202, 227, 201, 202, 
	228, 201, 202, 65, 201, 202, 230, 201, 
	202, 231, 201, 202, 232, 201, 202, 233, 
	201, 202, 234, 201, 202, 228, 201, 202, 
	236, 201, 202, 237, 201, 202, 238, 201, 
	202, 65, 201, 202, 240, 201, 202, 241, 
	201, 202, 242, 201, 202, 243, 201, 202, 
	244, 201, 202, 245, 201, 202, 246, 201, 
	202, 247, 65, 201, 202, 248, 201, 202, 
	249, 201, 202, 250, 201, 202, 251, 201, 
	202, 252, 201, 202, 234, 201, 202, 237, 
	201, 144, 0, 255, 256, 255, 0, 260, 
	259, 258, 256, 259, 257, 0, 258, 256, 
	257, 0, 258, 257, 260, 259, 258, 256, 
	259, 257, 260, 260, 3, 13, 15, 29, 
	32, 36, 66, 83, 142, 146, 254, 254, 
	255, 260, 0, 48, 262, 47, 48, 263, 
	47, 48, 264, 47, 48, 265, 47, 48, 
	266, 47, 48, 267, 47, 48, 65, 47, 
	48, 269, 47, 48, 270, 47, 48, 271, 
	47, 48, 65, 47, 48, 273, 47, 48, 
	274, 47, 48, 275, 47, 48, 276, 47, 
	48, 277, 47, 48, 278, 47, 48, 279, 
	47, 48, 280, 65, 47, 48, 281, 47, 
	48, 282, 47, 48, 283, 47, 48, 284, 
	47, 48, 285, 47, 48, 266, 47, 48, 
	270, 47, 288, 0, 2, 0, 0, 
}

var _lexer_trans_actions []byte = []byte{
	54, 0, 3, 1, 0, 1, 29, 29, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 43, 54, 0, 3, 1, 0, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 43, 0, 43, 0, 43, 139, 
	48, 7, 102, 9, 0, 134, 45, 45, 
	45, 5, 122, 33, 33, 33, 0, 122, 
	33, 33, 33, 0, 122, 33, 0, 33, 
	0, 106, 11, 11, 43, 54, 0, 0, 
	43, 114, 25, 0, 54, 43, 0, 43, 
	0, 43, 0, 43, 0, 43, 0, 43, 
	0, 43, 0, 43, 0, 43, 0, 43, 
	0, 43, 0, 43, 0, 43, 0, 43, 
	0, 43, 43, 43, 43, 43, 0, 27, 
	118, 27, 27, 51, 27, 0, 54, 0, 
	1, 0, 43, 0, 43, 0, 43, 149, 
	126, 57, 110, 23, 0, 0, 43, 0, 
	43, 0, 43, 0, 43, 0, 43, 0, 
	43, 0, 43, 0, 43, 0, 43, 0, 
	43, 144, 57, 54, 0, 54, 0, 72, 
	33, 72, 84, 84, 84, 84, 84, 84, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 15, 0, 54, 0, 0, 54, 
	15, 0, 130, 31, 60, 57, 31, 57, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	66, 31, 43, 0, 43, 0, 43, 0, 
	43, 0, 43, 0, 43, 0, 43, 0, 
	43, 144, 57, 54, 0, 54, 0, 81, 
	84, 81, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 21, 
	0, 0, 43, 0, 43, 0, 43, 0, 
	43, 0, 43, 0, 43, 0, 43, 144, 
	57, 54, 0, 54, 0, 69, 33, 69, 
	84, 84, 84, 84, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 13, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 13, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 13, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 0, 43, 0, 43, 0, 43, 
	0, 43, 0, 43, 0, 43, 0, 43, 
	0, 43, 0, 43, 0, 43, 0, 43, 
	0, 0, 43, 0, 43, 0, 43, 0, 
	43, 0, 43, 0, 43, 0, 43, 0, 
	43, 0, 43, 144, 57, 54, 0, 54, 
	0, 78, 33, 78, 84, 84, 84, 84, 
	84, 84, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 19, 0, 54, 0, 
	0, 54, 19, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 19, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 19, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 144, 57, 54, 
	0, 54, 0, 75, 33, 75, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 17, 
	0, 54, 0, 0, 54, 17, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 17, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 17, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 17, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 0, 43, 0, 0, 0, 43, 54, 
	37, 37, 87, 37, 37, 43, 0, 39, 
	0, 43, 0, 0, 54, 0, 0, 39, 
	0, 0, 54, 0, 93, 90, 41, 90, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	99, 0, 43, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 15, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 15, 0, 54, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 15, 0, 54, 0, 0, 
	54, 0, 0, 54, 0, 0, 54, 0, 
	0, 54, 0, 0, 54, 0, 0, 54, 
	0, 0, 0, 43, 0, 43, 0, 
}

var _lexer_eof_actions []byte = []byte{
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 
}

const lexer_start int = 1
const lexer_first_final int = 289

const lexer_en_main int = 1


//line lexer_go.rl:145
  // END: write data noerror;

func ParseFeature(data []byte) (feature Feature, err error) {
  cs, p, pe, eof := 0, 0, len(data), len(data)

  // public void scan(String source)  {
  //   String input = source + "\n%_FEATURE_END_%";
  //   byte[] data = null;
  //   try {
  //     data = input.getBytes("UTF-8");
  //   } catch(UnsupportedEncodingException e) {
  //     throw new RuntimeException(e);
  //   }
  //   int cs, p = 0, pe = data.length;
  //   int eof = pe;

  //   int lineNumber = 1;
  //   int lastNewline = 0;

  //   int contentStart = -1;
  //   int currentLine = -1;
  //   int docstringContentTypeStart = -1;
  //   int docstringContentTypeEnd = -1;
  //   int startCol = -1;
  //   int nextKeywordStart = -1;
  //   int keywordStart = -1;
  //   String keyword = null;
  //   List<String> currentRow = null;

  // START: write init
    
//line ../gocumber/parser.go:595
	{
	cs = lexer_start
	}

//line lexer_go.rl:176
  // END: write init

  // START: write exec
    
//line ../gocumber/parser.go:605
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
	if cs == 0 {
		goto _out
	}
_resume:
	_keys = int(_lexer_key_offsets[cs])
	_trans = int(_lexer_index_offsets[cs])

	_klen = int(_lexer_single_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case data[p] < _lexer_trans_keys[_mid]:
				_upper = _mid - 1
			case data[p] > _lexer_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_lexer_range_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case data[p] < _lexer_trans_keys[_mid]:
				_upper = _mid - 2
			case data[p] > _lexer_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	cs = int(_lexer_trans_targs[_trans])

	if _lexer_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_lexer_trans_actions[_trans])
	_nacts = uint(_lexer_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _lexer_actions[_acts-1] {
		case 0:
//line lexer_go.rl:7

      // contentStart = p;
      // currentLine = lineNumber;
      // if(keyword != null) {
      //   startCol = p - lastNewline - (keyword.length() + 1);
      // }
    
		case 1:
//line lexer_go.rl:15

      // currentLine = lineNumber;
      // startCol = p - lastNewline;
    
		case 2:
//line lexer_go.rl:20

      // contentStart = p;
    
		case 3:
//line lexer_go.rl:24

      // docstringContentTypeStart = p;
    
		case 4:
//line lexer_go.rl:28

      // docstringContentTypeEnd = p;
    
		case 5:
//line lexer_go.rl:32

      // String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      // String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      // listener.docString(conType, con, currentLine);
    
		case 6:
//line lexer_go.rl:38

      // String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      // listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      // if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      // nextKeywordStart = -1;
    
		case 7:
//line lexer_go.rl:45

      // String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      // listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      // if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      // nextKeywordStart = -1;
    
		case 8:
//line lexer_go.rl:52

      // String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      // listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      // if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      // nextKeywordStart = -1;
    
		case 9:
//line lexer_go.rl:59

      // String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      // listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      // if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      // nextKeywordStart = -1;
    
		case 10:
//line lexer_go.rl:66

      // String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      // listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      // if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      // nextKeywordStart = -1;
    
		case 11:
//line lexer_go.rl:73

      // listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    
		case 12:
//line lexer_go.rl:77

      // listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      // keywordStart = -1;
    
		case 13:
//line lexer_go.rl:82

      // listener.tag(substring(data, contentStart, p).trim(), currentLine);
      // keywordStart = -1;
    
		case 14:
//line lexer_go.rl:87

      // lineNumber++;
    
		case 15:
//line lexer_go.rl:91

      // lastNewline = p + 1;
    
		case 16:
//line lexer_go.rl:95

      // if(keywordStart == -1) keywordStart = p;
    
		case 17:
//line lexer_go.rl:99

      // keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      // keywordStart = -1;
    
		case 18:
//line lexer_go.rl:104

      // nextKeywordStart = p;
    
		case 19:
//line lexer_go.rl:108

    //   p = p - 1;
    //   currentRow = new ArrayList<String>();
    //   currentLine = lineNumber;
    
		case 20:
//line lexer_go.rl:114

      // contentStart = p;
    
		case 21:
//line lexer_go.rl:118

      // String con = substring(data, contentStart, p).trim();
      // currentRow.add(con
      //   .replace("\\|", "|")
      //   .replace("\\n", "\n")
      //   .replace("\\\\", "\\")
      // );
    
		case 22:
//line lexer_go.rl:127

      // listener.row(currentRow, currentLine);
    
		case 23:
//line lexer_go.rl:131

      // if(cs < lexer_first_final) {
      //   String content = currentLineContent(data, lastNewline);
      //   throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      // } else {
      //   listener.eof();
      // }
    
//line ../gocumber/parser.go:840
		}
	}

_again:
	if cs == 0 {
		goto _out
	}
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		__acts := _lexer_eof_actions[cs]
		__nacts := uint(_lexer_actions[__acts]); __acts++
		for ; __nacts > 0; __nacts-- {
			__acts++
			switch _lexer_actions[__acts-1] {
			case 23:
//line lexer_go.rl:131

      // if(cs < lexer_first_final) {
      //   String content = currentLineContent(data, lastNewline);
      //   throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      // } else {
      //   listener.eof();
      // }
    
//line ../gocumber/parser.go:869
			}
		}
	}

	_out: {}
	}

//line lexer_go.rl:180
  // END: write init


    return Feature{}, nil
}
